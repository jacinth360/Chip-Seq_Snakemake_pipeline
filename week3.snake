import pandas

sample = ["RUNX1sample", "INPsample"]
rep = ["rep1", "rep2"]
number = ['1', '2', '3', '4', 'rev.1', 'rev.2']
filteredbed = ['RUNX1_intersected']

rule all:
    input:
        expand('results/{sample}_{rep}_tags', sample=sample, rep=rep),
        # expand('results/RUNX1_{rep}_peaks.txt', rep = rep),
        # expand('results/RUNX1sample_{rep}_peaks.bed', rep = rep),
        # 'results/RUNX1_intersected_peaks.bed',
        # 'results/RUNX1_intersected_peaks.filtered.bed',
        expand('results/RUNX1_intersected_peaks.filtered.bed'),
        #expand('results/{filteredbed}.filtered.bed', filteredbed=filteredbed),
        'results/RUNX1_intersected_peaks_annotated.tsv',
        'results/motifs/homerMotifs.html'

rule make_tag_dir:
    input:
        bam="results/sorted_{sample}_{rep}.bam"
    output:
        tag_dir=directory("results/{sample}_{rep}_tags")
    params:
        threads=4
    conda:
        'envs/homer_env.yml'
    shell:
        '''
        makeTagDirectory {output.tag_dir} {input.bam}
        '''

rule findPeaks:
    input:
        runx1_dir='results/RUNX1sample_{rep}_tags',
        input_dir='results/INPsample_{rep}_tags'
    output:
        auto='results/RUNX1sample_{rep}_peaks.txt'
    params:
        size='-size 200'
    threads: 2
    conda:
        'envs/homer_env.yml'
    shell:
        '''
        findPeaks {input.runx1_dir} -style factor -o {output.auto} {params.size} -i {input.input_dir}
        '''

rule convertPeakFiles:
    input:
        'results/RUNX1sample_{rep}_peaks.txt'
    output:
        'results/RUNX1sample_{rep}_peaks.bed'
    conda:
        'envs/homer_env.yml'
    shell:
        '''
        pos2bed.pl {input} > {output}
        '''

rule intersect_peaks:
    input:
        rep_un='results/RUNX1sample_rep1_peaks.bed',
        rep_du='results/RUNX1sample_rep2_peaks.bed'
    output:
        'results/RUNX1_intersected_peaks.bed'
    params:
        option='-a'
    conda:
        'envs/bedtools_env.yml'
    shell:
        '''
        bedtools intersect {params.option} {input.rep_un} -b {input.rep_du} > {output}
        '''

rule filter_blacklist:
    input:
        peaks_bed='results/RUNX1_intersected_peaks.bed',
        blacklist='results/hg38-blacklist.v2.bed'
    output:
        filtered='results/RUNX1_intersected_peaks.filtered.bed'
    conda:
        'envs/bedtools_env.yml'
    shell:
        '''
        bedtools intersect -a {input.peaks_bed} -b {input.blacklist} -v > {output.filtered}
        '''

rule unzip_gtf:
    input:
        'results/gencode.v45.primary_assembly.annotation.gtf.gz'
    output:
        'results/gencode.v45.primary_assembly.annotation.gtf'
    shell:
        '''
        gunzip {input}
        '''

rule annotate_peaks:
    input:
        bedfile='results/RUNX1_intersected_peaks.filtered.bed',
        gencode='results/gencode.v45.primary_assembly.annotation.gtf'
    output:
        'results/RUNX1_intersected_peaks_annotated.tsv'
    conda:
        'envs/homer_env.yml'
    shell:
        '''
        annotatePeaks.pl {input.bedfile} hg38 -gtf {input.gencode} > {output}
        '''

rule unzip_genome:
    input:
        'results/GRCh38.primary_assembly.genome.fa.gz'
    output:
        'results/GRCh38.primary_assembly.genome.fa'
    shell:
        '''
        gunzip {input}
        '''

rule motifs:
    input:
        bedfile='results/RUNX1_intersected_peaks.filtered.bed',
        genome='results/GRCh38.primary_assembly.genome.fa'
    output:
        dir=directory('results/motifs/'),
        html='results/motifs/homerMotifs.html'
    params:
        size='-size 200'
    conda:
        'envs/homer_env.yml'
    shell:
        '''
        mkdir -p {output.dir}
        findMotifsGenome.pl {input} {output.dir} {params.size}
        '''

